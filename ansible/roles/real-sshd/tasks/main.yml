---
- name: Install scripts-patched OpenSSH
  dnf:
    name: scripts-openssh-server
    state: present
  when: use_scripts_openssh
- name: Configure sshd to print helpful warnings
  blockinfile:
    path: /etc/pam.d/sshd
    insertafter: "#%PAM-1.0"
    block: |
      # If their user exists (success),
      auth	[success=ignore ignore=ignore default=1]	pam_succeed_if.so uid >= 0
      # print the "You don't have tickets" error:
      auth	[success=die ignore=reset default=die]	pam_echo.so file=/etc/issue.net.no_tkt
      # else print the "your account doesn't exist" error:
      auth	[success=die ignore=reset default=die]	pam_echo.so file=/etc/issue.net.no_user
      # If they somehow slipped through, deny:
      auth	required	pam_deny.so
- name: Remove all other auth methods
  replace:
    path: /etc/pam.d/sshd
    after: 'pam_deny.so'
    regexp: '^(auth\s.+)$'
    replace: '# \1'
- name: Install /etc/issue.net*
  copy:
    dest: "/etc/{{ item }}"
    src: "{{ item }}"
  loop:
    - issue.net
    - issue.net.no_tkt
    - issue.net.no_user
- name: Configure sshd for scripts
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '(?i)^#?\s*{{ item | regex_search("^(\S+)") }}\s'
    line: "{{ item }}"
  loop:
    # "PasswordAuthentication no" and "GSSAPIAuthentication yes" comes from the k5login role
    - ChallengeResponseAuthentication yes
    - GSSAPICleanupCredentials yes
    - GSSAPIStrictAcceptorCheck no
    - GSSAPIKeyExchange yes
    - X11Forwarding no
    - Banner /etc/issue.net
    - LogLevel VERBOSE
    - MaxStartups 50:30:500
    - AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION LC_ALL EDITOR VISUAL
    # See trac #23
    - HostbasedAuthentication yes
    - IgnoreRhosts yes
    - IgnoreUserKnownHosts yes
    - DenyUsers {{ groups['scripts-real'] | map('regex_replace', '^', 'root@') | join(' ') }}

  notify: reload ssh
- name: Read ssh host keys
  command: "/bin/cat /etc/ssh/ssh_host_*_key.pub"
  register: cat_host_keys
- name: Generate ssh_known_hosts
  # N.B. This assumes that all the scripts servers share a single host key.
  vars:
    ssh_host_keys: "{{ cat_host_keys.stdout_lines }}"
  template:
    dest: /etc/ssh/ssh_known_hosts
    src: ssh_known_hosts.j2

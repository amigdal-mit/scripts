#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log         /dev/log local2 debug

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
#    user        haproxy
    group       haproxy
    daemon
    # do-resolve is not threadsafe, so restrict haproxy to one thread
    # See https://github.com/haproxy/haproxy/issues/227
    nbthread 1

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
#    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    option                  nolinger
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 5000

frontend scripts_http_frontend
    no log # COMMENT ME to enable logs
    bind *:80
    # the lower option is required to make it work in the http frontend 
    http-request do-resolve(txn.ldapip,scripts_dns,ipv4) req.hdr(host),lower
    http-request do-resolve(txn.ldapip,scripts_dns,ipv4) str(scripts.mit.edu) if ! { var(txn.ldapip) -m found }
    http-request capture var(txn.ldapip) len 40
    # everything but '%[capture.req.hdr(0)]' is the default http log format. '%[capture.req.header(0)]' gets the first thing we captured, which in this case is txn.ldapip.
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[capture.req.hdr(0)]"
    use_backend scripts_http_offnet_backend if ! { var(txn.ldapip) -m ip 18.4.86.0/24 }
    default_backend scripts_http_backend

frontend scripts_tcp_frontend
    no log # COMMENT ME to enable logs
    bind *:443-444
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content do-resolve(txn.ldapip,scripts_dns,ipv4) req.ssl_sni
    tcp-request content capture var(txn.ldapip) len 40
    # everything but '%[capture.req.hdr(0)]' is the default tcp log format.
    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq %[capture.req.hdr(0)]"
    tcp-request content accept if { req.ssl_hello_type 1 } { var(txn.ldapip) -m found }
    use_backend scripts_tcp_offnet_backend if ! { var(txn.ldapip) -m ip 18.4.86.0/24 }
    default_backend scripts_tcp_backend

backend scripts_http_backend
    http-request reject unless { var(txn.ldapip) -m found }
    http-request set-dst var(txn.ldapip)
    source       0.0.0.0 usesrc client
    server       clear 0.0.0.0:0

backend scripts_tcp_backend
    mode tcp
    tcp-request content reject unless { var(txn.ldapip) -m found }
    tcp-request content set-dst var(txn.ldapip)
    source      0.0.0.0 usesrc client
    server      clear 0.0.0.0:0

backend scripts_http_offnet_backend
    http-request reject unless { var(txn.ldapip) -m found }
    http-request set-dst var(txn.ldapip)
    server       clear 0.0.0.0:0

backend scripts_tcp_offnet_backend
   mode tcp
   tcp-request content do-resolve(txn.ldapip,scripts_dns,ipv4) str(scripts.mit.edu) unless { var(txn.ldapip) -m found }
   tcp-request content reject unless { var(txn.ldapip) -m found }
   tcp-request content set-dst var(txn.ldapip)
   server      clear 0.0.0.0:0
   
resolvers scripts_dns
    nameserver bind-ldap 127.0.0.1:{{ proxy_dns_port }}
    resolve_retries 1
    accepted_payload_size 8192

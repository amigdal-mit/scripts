ruleset(name="zpublic") {
  |/run/zephyr-syslog-public;RSYSLOG_SyslogProtocol23Format
  stop
}
ruleset(name="zprivate") {
  |/run/zephyr-syslog-private;RSYSLOG_SyslogProtocol23Format
  stop
}

# Putting zroot in a queue means we can use the "stop" operator
# without affecting file output.
# See https://www.rsyslog.com/doc/v8-stable/rainerscript/rainerscript_call.html
ruleset(name="zroot" queue.type="Direct") {
  # https://www.rsyslog.com/doc/v8-stable/rainerscript/control_structures.html
  # https://rainer.gerhards.net/2012/10/how-to-use-rsyslogs-ruleset-and-call-statements.html
  # https://www.rsyslog.com/doc/v8-stable/configuration/filters.html

  # $msg always has a leading space: https://www.rsyslog.com/log-normalization-and-the-leading-space/

  # First, audit-related messages go to scripts-auto
  if \
    ($programname == 'sshd' and ( \
        $msg startswith ' Authorized to root, ' \
        or \
        ($msg startswith ' Accepted ' and $msg contains ' for root from ') \
        or \
        $msg startswith ' pam_unix(sshd:session): session opened for user root ' \
        or \
        $msg == ' pam_unix(sshd:session): session closed for user root' \
    )) \
  then {
    call zpublic
  }
  # TODO: Look up ssh keys and annotate with whose key it is
  # Publicly log all root sessions, except cron or sudo
  if (re_match($msg, '^ pam_unix\\([^:]+:session\\): session \\S+ for user root')) then {
    # Ignore all PAM session messages from cron
    if ($programname == 'CRON') then stop
    # sudo logs invocations itself with more information; ignore the
    # PAM messages it generates.
    if ($programname == 'sudo') then stop
    call zpublic
  }
  if (re_match($msg, 'Root (\\S+) shell')) then call zpublic
  if ($msg startswith ' Out of memory:') then call zpublic
  if ($programname == 'admof') then call zpublic
  # TODO: Spew when root runs su or sudo?

  # Next, ignore known-safe chatty messages (list taken from the old
  # d_zroot.pl, with some F30 rewordings added)
  if (re_match($msg, '^ pam_unix\\([^:]+:session\\): session')) then stop
  if ($programname == 'sshd') then {
    if ($msg startswith ' Authorized to ') then stop
    if ($msg startswith ' Accepted ') then stop
    if ($msg startswith ' Connection closed') then stop
    if ($msg startswith ' Closing connection to') then stop
    if ($msg startswith ' Starting session: ') then stop
    if ($msg startswith ' Close session: ') then stop
    if (re_match($msg, '^ Connection from \\S+ port \\S+')) then stop
    if ($msg startswith ' Invalid user') then stop
    if ($msg startswith ' input_userauth_request: invalid user') then stop
    if ($msg startswith ' userauth_hostbased mismatch: ') then stop
    if ($msg startswith ' Received disconnect from ') then stop
    if ($msg startswith ' Disconnected from ') then stop
    if ($msg startswith ' Postponed keyboard-interactive') then stop
    if ($msg startswith ' Postponed gssapi-with-mic for ') then stop
    if ($msg startswith ' Failed keyboard-interactive/pam') then stop
    if ($msg startswith ' fatal: Read from socket failed: Connection reset by peer') then stop
    if ($msg startswith ' error: kex_exchange_identification: read: Connection reset by peer') then stop
    if ($msg startswith ' error: kex_exchange_identification: read: Connection closed by remote host') then stop
    if ($msg startswith ' Connection reset by ') then stop
    if ($msg startswith ' reverse mapping checking getaddrinfo') then stop
    if ($msg startswith ' pam_succeed_if(sshd:auth):') then stop
    if ($msg startswith ' error: PAM: Authentication failure') then stop
    if ($msg startswith ' pam_unix(sshd:auth): authentication failure') then stop
    if ($msg startswith ' pam_unix(sshd:auth): check pass; user unknown') then stop
    if (re_match($msg, '^ Address \\S+ maps to \\S+, but this does not map back to the address')) then stop
    if (re_match($msg, '^ Nasty PTR record .* is set up for .*, ignoring')) then stop
    if ($msg startswith ' User child is on pid ') then stop
    if (re_match($msg, '^ Accepted \\S+ public key \\S+ from \\S+$')) then stop
    if ($msg startswith ' error: maximum authentication attempts exceeded for ') then stop
  }
  if (re_match($msg, '^ Transferred: sent \\d+, received \\d+ bytes$')) then stop
  if ($msg == ' Setting tty modes failed: Invalid argument') then stop
  if ($programname == 'sudo') then {
    if (re_match($msg, '^ *nrpe .* COMMAND=/etc/nagios/check_ldap_mmr.real$')) then stop
    if (re_match($msg, '^ *scripts : .*; USER=root ; COMMAND=/etc/httpd/export-scripts-certs$')) then stop
    if (re_match($msg, '^ *pony : .*; USER=root ; COMMAND=/etc/pki/tls/gencsr-pony ')) then stop
    if (re_match($msg, '^ *root : TTY=')) then stop
  }
  if ($msg startswith ' Set /proc/self/oom_adj to ') then stop
  if ($msg startswith ' Set /proc/self/oom_score_adj to ') then stop
  if ($msg == ' selinux sandbox not useful [preauth]') then stop

  # Everything else goes to scripts-spew
  call zprivate
}

# Send errors, authpriv, and OOM events to the zroot queue
if \
  $syslogseverity <= '4' \
  or \
  $syslogfacility-text == 'authpriv' \
  or \
  ($syslogfacility-text == 'kern' and ($msg contains 'Out of memory:' or $msg contains 'Killed process')) \
then {
  call zroot
}

$ModLoad imrelp
$InputRELPServerRun 2514
